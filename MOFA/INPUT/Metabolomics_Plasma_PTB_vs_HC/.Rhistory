positive$metabolite_identification
grep(positive$metabolite_identification, out$metabolite_identification)
grepl(positive$metabolite_identification, out$metabolite_identification)
match(positive$metabolite_identification, out$metabolite_identification)
positive[match(positive$metabolite_identification, out$metabolite_identification),]
out[match(out$metabolite_identification, positive$metabolite_identification),]
yy<-out[match(out$metabolite_identification, positive$metabolite_identification),]
View(yy)
View(positive)
out
out$metabolite_identification
positive$metabolite_identification
match(out$metabolite_identification, positive$metabolite_identification)
View(yy)
View(positive)
positive$metabolite_identification
match(out$metabolite_identification, positive$metabolite_identification)
out$metabolite_identification
yy<-positive[match(out$metabolite_identification, positive$metabolite_identification),]
View(yy)
out$metabolite_identification
match(out$metabolite_identification, positive$metabolite_identification)
View(out)
out[match(out$metabolite_identification, positive$metabolite_identification),]
yy<-out[match(out$metabolite_identification, positive$metabolite_identification),]
View(yy)
match(out$metabolite_identification, positive$metabolite_identification)
uy<-match(out$metabolite_identification, positive$metabolite_identification)
uy<-merge(positive, out, by.x=5,  by.x=1, all.x=TRUE)
match(out$metabolite_identification, positive$metabolite_identification)
match(positive$metabolite_identification,out$metabolite_identification)
out[match(positive$metabolite_identification,out$metabolite_identification),]
yy<-out[match(positive$metabolite_identification,out$metabolite_identification),]
View(yy)
out<-out[match(positive$metabolite_identification,out$metabolite_identification),]
out$metabolite_identification == positive$metabolite_identification
positive <- positive[,c(21:60)]
View(positive)
colnames(positive)[1] <- "ID"
positive$ID <- out$metabolite_identification
write.table(x= positive   , file= "MTBLS7623_positive_mode_annotated_compound_name.tsv"  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= positive   , file= "MTBLS7623_positive_mode_annotated_compound_name.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
positive$ID <- out$HMDB
write.table(x= positive   , file= "MTBLS7623_positive_mode_annotated_HMDB.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
positive$ID <- out$KEGG
write.table(x= positive   , file= "MTBLS7623_positive_mode_annotated_KEGG.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
paste("ID.seq",1:4,sep="")
nrow(positive)
positive$ID <- paste("peak",1:nrow(positive),sep="")
View(positive)
saved <- positive
positive <- vroom("/home/cristia/Scrivania/BiomiX/Dataset_test/Metabolomics/Elaboration_dataset/m_MTBLS7623_LC-MS_positive_reverse-phase_metabolite_profiling_v2_maf.tsv" , delim = "\t", col_names = TRUE)
Annotated_pos <- positive[,c(6,10)]
View(Annotated_pos)
Annotated_pos <- positive[,c(5,6,10)]
View(Annotated_pos)
View(Annotated_pos)
colnames(Annotated_pos)[1] <- "name"
Annotated_pos$name <- paste("peak",1:nrow(Annotated_pos),sep="")
write.table(x= Annotated_pos   , file= "MTBLS7623_positive_mode_MS1_annotation.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
colnames(Annotated_pos)[2] <- "m/z"
colnames(Annotated_pos)[2] <- "RT_min"
colnames(Annotated_pos)[2] <- "m/z"
colnames(Annotated_pos)[3] <- "RT_min"
write.table(x= Annotated_pos   , file= "MTBLS7623_positive_mode_MS1_annotation.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
saved$ID <- paste("peak",1:nrow(Annotated_pos),sep="")
View(saved)
write.table(x= positive   , file= "MTBLS7623_positive_mode_unannotated.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
write.table(x= saved   , file= "MTBLS7623_positive_mode_unannotated.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
View(saved)
colnames(saved)
colnames(saved)[-1]
Metadata<-as.data.frame(colnames(saved)[-1])
View(Metadata)
rep("HC",13)
c(rep("HC",13), rep("PTB",13),rep("PTB_DM",13))
Metadata$CONDITION <- c(rep("HC",13), rep("PTB",13),rep("PTB_DM",13))
colnames(Metadata)[1]
colnames(Metadata)[1]
colnames(Metadata)[1] <- "ID"
write.table(x= saved   , file= "MTBLS7623_Metadata.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
Meta_raw <- vroom("/home/cristia/Scrivania/BiomiX/Dataset_test/Metabolomics/Elaboration_dataset/Metadata.raw" , delim = ",", col_names = TRUE)
Meta_raw <- vroom("/home/cristia/Scrivania/BiomiX/Dataset_test/Metabolomics/Elaboration_dataset/Metadata_raw.txt" , delim = ",", col_names = TRUE)
Meta_raw <- vroom("/home/cristia/Scrivania/BiomiX/Dataset_test/Metabolomics/Elaboration_dataset/Metadata_raw.txt" , delim = ",", col_names = TRUE)
View(Meta_raw)
Meta_raw$`Sample Name`
str_replace(Meta_raw$`Sample Name`, "Healthy", "HC")
library(stringr)
str_replace(Meta_raw$`Sample Name`, "Healthy", "HC")
Meta_raw$`Sample Name` <-str_replace(Meta_raw$`Sample Name`, "Healthy", "HC")
write.table(x= saved   , file= "MTBLS7623_Metadata.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
write.table(x= Metadata   , file= "MTBLS7623_Metadata.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
merge(Metadata, Meta_raw, by.x = 2 , by.x = 28, all.x=TRUE )
merge(Metadata, Meta_raw, by.x = 1 , by.x = 28, all.x=TRUE )
merge(Metadata, Meta_raw, by.x = "ID" , by.x = 28, all.x=TRUE )
merge(Metadata, Meta_raw, by.x = "ID" , by.x = "Sample Name", all.x=TRUE )
colnames(Meta_raw)[28] <- "Sample_Name"
merge(Metadata, Meta_raw, by.x = "ID" , by.y = "Sample_Name", all.x=TRUE )
Metadata<- merge(Metadata, Meta_raw, by.x = "ID" , by.y = "Sample_Name", all.x=TRUE )
colnames(Metadata)[4] <- "AGE"
colnames(Metadata)[30] <- "GENDER"
substr(Metadata$AGE,3,100)
substr(Metadata$AGE,1,2)
Metadata$AGE<-substr(Metadata$AGE,1,2)
View(Metadata)
Metadata$AGE<-as.numeric(substr(Metadata$AGE,1,2))
write.table(x= Metadata   , file= "MTBLS7623_Metadata.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
order(Metadata$ID ,decreasing = T)
Metadata_not<-Metadata[order(Metadata$ID ,decreasing = T),]
View(Metadata_not)
write.table(x= Metadata_not   , file= "MTBLS7623_Metadata_not_ordered.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
View(Metadata)
View(Metadata)
substr(Metadata$isolate)
substr(Metadata$isolate,1,4)
Metadata$isolate<-substr(Metadata$isolate,1,4)
Clinical_binary <- Metadata[, c(1,20,30)]
View(Clinical_binary)
Clinical_numeric <- Metadata[, c(1,4,6,7)]
View(Clinical_numeric)
write.table(x= Clinical_binary   , file= "MTBLS7623_clinical_binary.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
write.table(x= Clinical_numeric   , file= "MTBLS7623_clinical_numeric.tsv"  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
View(Clinical_numeric)
library(vroom)
library(dplyr)
library(cmmr)
library(stringr)
library(rlist)
library(tibble)
if (length(args) == 0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
if (args == "help") {
print("CELL TYPE available: BLymphocytes / Monocytes / TLymphocytes / Neutrophils ....... DISEASES AVAILABLE: SjS / RA / SSc / PAPs / MCTD / UCTD / SLE ")
stop()
} else {
stop("The number of argument is not enough, did you miss the cell type or the disease?")
}
} else if (length(args)==3) {
print("Correct number of argument :)")
paste("Disease:", args[1])
}else if (length(args)> 3) {
stop("Too many argument.. are you typing random words?")
}
# MS2_annotation = "YES"   #ADD TO INTERFACE
MS2_databases = c("HMDB","MONA","MASSBANK")  #ADD TO INTERFACE
COMMAND <- vroom(paste(directory,"COMMANDS.tsv",sep="/"), delim = "\t")
COMMAND_MOFA <- vroom(paste(directory,"COMMANDS_MOFA.tsv",sep="/"), delim = "\t")
library(vroom)
args = as.list(c("Neutrophils","PAPS"))
args[1] <-"PTB"
args[2] <-"HC"
args[3] <-"/home/cristia/BiomiX2.2"
directory <- args[3]
iterations = 1
selection_samples = "NO"
Cell_type = "Plasma"
i = 1
ANNOTATION = "Annotated"
DIR_METADATA <- readLines("/home/cristia/BiomiX2.2/directory.txt")
# MS2_annotation = "YES"   #ADD TO INTERFACE
MS2_databases = c("HMDB","MONA","MASSBANK")  #ADD TO INTERFACE
COMMAND <- vroom(paste(directory,"COMMANDS.tsv",sep="/"), delim = "\t")
COMMAND_MOFA <- vroom(paste(directory,"COMMANDS_MOFA.tsv",sep="/"), delim = "\t")
COMMAND_ADVANCED <- vroom(paste(directory,"COMMANDS_ADVANCED.tsv",sep="/"), delim = "\t")
Heatmap_genes <- as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[3])
LogFC <- as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS[1])
padju <- as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS[2])
#MS2_DATABASES
Input_ms2<- COMMAND_ADVANCED[3,8]
Input_ms2 <- unlist(strsplit(as.character(Input_ms2), "/"))
Input_ms2<-as.numeric(substr(Input_ms2, 1, 1))
if(sum(is.na(Input_ms2)) > 0){
MS2_databases<-MS2_databases[!is.na(Input_ms2)]
Input_ms2<-Input_ms2[!is.na(Input_ms2)]
}
MS2_databases <-MS2_databases[order(Input_ms2)]
#loading annotation and matrix
directory2 <- paste(directory,"/Metabolomics/INPUT",sep="")
setwd(directory2)
print(i)
print(COMMAND$LABEL[i])
#LOADING ANNOTATION AND PEAKS
matrix <- vroom(COMMAND$DIRECTORIES[i],delim="\t",col_names = TRUE, comment = "#")
sam <- colnames(matrix)
pea <-matrix$ID
matrix <- t(matrix[,-1])
matrix <- add_column(as.data.frame(matrix), sam[-1], .after = 0)
colnames(matrix) <-c("ID",pea)
ANNOTATION = COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_GENERAL[1]
if(ANNOTATION == "MS1"){
input_ms1<-which(substr(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_FILES_INDEX,1,1) %in% i)
if (length(input_ms1) != 0){
if (file.exists(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_FILES[input_ms1])){
annotation <- vroom(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_FILES[input_ms1],delim="\t",col_names = TRUE)
if (ncol(annotation) == 3){
if (colnames(annotation)[3] == "RT_sec"){
annotation$RT_min <- annotation$RT_sec/60
}
if (colnames(annotation)[3] == "RT_min"){
annotation$RT_sec <- annotation$RT_min*60
}
}
}
}}
if(ANNOTATION == "MS2"){
input_ms1<-which(substr(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS2_3_INDEX,1,1) %in% i)
if (length(input_ms1) != 0){
if (file.exists(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_FILES_MS2[input_ms1])){
annotation <- vroom(COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_FILES_MS2[input_ms1],delim="\t",col_names = TRUE)
if (ncol(annotation) == 3){
if (colnames(annotation)[3] == "RT_sec"){
annotation$RT_min <- annotation$RT_sec/60
}
if (colnames(annotation)[3] == "RT_min"){
annotation$RT_sec <- annotation$RT_min*60
}
}
}
}}
#create directory
dir.create(path = paste(directory,"/MOFA/INPUT/", "Metabolomics_", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
directory2 <- paste(directory, "/MOFA/INPUT/", "Metabolomics_", Cell_type,  "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
if (str_detect(COMMAND$LABEL[i], fixed("Serum", ignore_case=TRUE))| str_detect(COMMAND$LABEL[i], fixed("Plasma", ignore_case=TRUE))){
if (file.exists("serum_metabolite_annotated.tsv") == TRUE){
print("File available locally, using the local version")
serum_metabolite <- vroom(paste(directory2,"serum_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
serum_metabolite <- vroom(url("https://hmdb.ca/metabolites.csv?action=index&blood=1&c=hmdb_id&controller=metabolites&d=up&detected=1&expected=1&filter=true&predicted=1&quantified=1&utf8=%E2%9C%93"),delim=",",col_names = TRUE )
serum_metabolite <- as.data.frame(serum_metabolite)
write.table(serum_metabolite,paste(directory2,"serum_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Urine", ignore_case=TRUE))){
if (file.exists("urine_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
urine_metabolite <- vroom(paste(directory2,"urine_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
urine_metabolite <- vroom(url("https://hmdb.ca/metabolites.csv?action=index&c=hmdb_id&controller=metabolites&d=up&detected=1&expected=1&filter=true&predicted=1&quantified=1&urine=1&utf8=%E2%9C%93"),delim=",",col_names = TRUE )
urine_metabolite <- as.data.frame(urine_metabolite)
write.table(urine_metabolite,paste(directory2,"urine_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}
}
if (str_detect(COMMAND$LABEL[i], fixed("Saliva", ignore_case=TRUE))){
if (file.exists("saliva_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
saliva_metabolite <- vroom(paste(directory2,"saliva_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
saliva_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&saliva=1&filter=true"),delim=",",col_names = TRUE )
saliva_metabolite <- as.data.frame(saliva_metabolite)
write.table(saliva_metabolite,paste(directory2,"saliva_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Cerebrospinal Fluid", ignore_case=TRUE))){
if (file.exists("cerebrospinal_fluid_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
CSF_metabolite <- vroom(paste(directory2,"cerebrospinal_fluid_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
CSF_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&csf=1&filter=true"),delim=",",col_names = TRUE )
CSF_metabolite <- as.data.frame(CSF_metabolite)
write.table(CSF_metabolite,paste(directory2,"cerebrospinal_fluid_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Feces", ignore_case=TRUE))){
if (file.exists("feces_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
feces_metabolite <- vroom(paste(directory2,"feces_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
feces_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&feces=1&filter=true"),delim=",",col_names = TRUE )
feces_metabolite <- as.data.frame(feces_metabolite)
write.table(feces_metabolite,paste(directory2,"feces_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Sweat", ignore_case=TRUE))){
if (file.exists("sweat_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
sweat_metabolite <- vroom(paste(directory2,"sweat_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
sweat_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&sweat=1&filter=true"),delim=",",col_names = TRUE )
sweat_metabolite <- as.data.frame(sweat_metabolite)
write.table(sweat_metabolite,paste(directory2,"sweat_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Breast milk", ignore_case=TRUE))){
if (file.exists("breast_milk_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
breast_milk_metabolite <- vroom(paste(directory2,"breast_milk_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
breast_milk_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&breast_milk=1&filter=true"),delim=",",col_names = TRUE )
breast_milk_metabolite <- as.data.frame(breast_milk_metabolite)
write.table(breast_milk_metabolite,paste(directory2,"breast_milk_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Bile", ignore_case=TRUE))){
if (file.exists("bile_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
bile_metabolite <- vroom(paste(directory2,"bile_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
bile_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&bile=1&filter=true"),delim=",",col_names = TRUE )
bile_metabolite <- as.data.frame(bile_metabolite)
write.table(bile_metabolite,paste(directory2,"bile_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
if (str_detect(COMMAND$LABEL[i], fixed("Amniotic Fluid", ignore_case=TRUE))){
if (file.exists("AF_metabolite_annotated") == TRUE){
print("File available locally, using the local version")
AF_metabolite <- vroom(paste(directory2,"AF_metabolite_annotated.tsv",sep = "/"),delim="\t",col_names = TRUE)
}else{
print("File unavailable locally, downloading it from HMDB database")
AF_metabolite <- vroom(url("https://hmdb.ca/metabolites?utf8=%E2%9C%93&filter=true&quantified=1&detected=1&expected=1&predicted=1&amniotic_fluid=1&filter=true"),delim=",",col_names = TRUE )
AF_metabolite <- as.data.frame(AF_metabolite)
write.table(AF_metabolite,paste(directory2,"AF_metabolite_annotated.tsv", sep = "/"),quote = FALSE, row.names = F, sep = "\t")
}}
Metadata_total <- vroom(DIR_METADATA, delim = "\t", col_names = TRUE)
if (selection_samples == "YES") {
num <- grep(Cell_type, Metadata_total$ID_CELL_TYPE)
Metadata_Bcell <- Metadata_total[num,]
Metadata_total <- Metadata_total[num,]
Identifier<-matrix$ID
num <-which(colnames(matrix) %in% Metadata_Bcell$ID_CELL_TYPE )
matrix <- as.matrix(matrix[,num])
print(Metadata_Bcell$ID_CELL_TYPE)
num <-which(Metadata_Bcell$ID_CELL_TYPE  %in% colnames(matrix) )
Metadata_Bcell <- Metadata_Bcell[num,]
#If multiple select only the first column
Metadata_Bcell <- Metadata_Bcell[!duplicated(Metadata_Bcell$ID), ]
Metadata_Bcell<-Metadata_Bcell[order(Metadata_Bcell$ID),]
matrix<-matrix[,order(colnames(matrix))]
} else {
print("No samples selection")
Metadata_Bcell <- Metadata_total
Metadata_Bcell<-Metadata_Bcell[order(Metadata_Bcell$ID),]
matrixi <- matrix[,2:ncol(matrix)]
matrix[,2:ncol(matrix)]<-matrixi[,order(colnames(matrixi))]
matrix<-as.data.frame(matrix)
Metadata_Bcell <- Metadata_total
num <-which(matrix$ID %in% Metadata_Bcell$ID)
Identifier<-matrix$ID
matrix <- as.matrix(matrix[num,])
print(Metadata_Bcell$ID)
num <-which(Metadata_Bcell$ID  %in% matrix[,1] )
Metadata_Bcell <- Metadata_Bcell[num,]
#If multiple select only the first column
Metadata_Bcell <- Metadata_Bcell[!duplicated(Metadata_Bcell$ID), ]
Metadata_Bcell<-Metadata_Bcell[order(Metadata_Bcell$ID),]
matrix<-matrix[order(matrix[,1]),]
}
Metadata <- Metadata_Bcell
Metadata_individual=NULL
Metadata_reads=NULL
Metadata_Bcell=NULL
Metadata_tot = NULL
Metadata_total = NULL
print("Same samples in matrix and metadata?")
print(all(Metadata$ID == matrix[,1]))
outs <- Metadata$CONDITION  == args[2]|Metadata$CONDITION  == args[1]
Metadata<- Metadata[outs,]
matrix<- matrix[outs,]
METADATA_FILT <- !is.na(COMMAND_ADVANCED[3,grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))])
METADATA_FILT_INDEX <-grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))
repetition = 0
for (meta_filter in METADATA_FILT_INDEX){
repetition <- repetition + 1
if (!is.na(COMMAND_ADVANCED[3,grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))])[repetition]){
COLNAME<-as.character(COMMAND_ADVANCED[1,meta_filter])
if (as.character(COMMAND_ADVANCED[2,meta_filter]) =="Numerical"){
To_filter<-as.numeric(unlist(Metadata[,COLNAME]))
simbol<-substr(as.character(COMMAND_ADVANCED[3,meta_filter]),1,1)
characters_to_remove <- c(">", "<", "=", " ")
value_threshold <- as.numeric(gsub(paste(characters_to_remove, collapse = "|"), "", as.character(COMMAND_ADVANCED[3,meta_filter])))
comparison_operator <- switch(simbol,
"<" = function(a, b) a < b,
">" = function(a, b) a > b,
"=" = function(a, b) a == b,
">=" = function(a, b) a >= b,
"<=" = function(a, b) a <= b,
NA)
Metadata <- Metadata[comparison_operator(To_filter, value_threshold),]
matrix <- matrix[,comparison_operator(To_filter, value_threshold)]
}else if (as.character(COMMAND_ADVANCED[2,meta_filter]) =="Factors"){
To_filter<- as.character(unlist(Metadata[,COLNAME]))
simbol<-substr(as.character(COMMAND_ADVANCED[3,meta_filter]),1,2)
characters_to_remove <- c("!=", "==", " ")
value_threshold <- as.character(gsub(paste(characters_to_remove, collapse = "|"), "", as.character(COMMAND_ADVANCED[3,meta_filter])))
comparison_operator <- switch(simbol,
"==" = function(a, b) a == b,
"!=" = function(a, b) a != b,
NA)
Metadata <- Metadata[comparison_operator(To_filter, value_threshold),]
DGE3 <- DGE3[,comparison_operator(To_filter, value_threshold)]
}
}else{
print("skip_filtering")
}
}
###
matrix<- as.data.frame(matrix)
rownames(matrix) <- matrix$ID
#matrixs <- matrix %>% filter(CONDITION == args[2]| CONDITION ==args[1])
matrixs <- matrix
matrixs <- add_column(matrixs, Metadata$CONDITION, .after = 1)
View(matrixs)
colnames(matrixs)
is.na(colnames(matrixs))
length(is.na(colnames(matrixs)))
summary(is.na(colnames(matrixs)))
summ(is.na(colnames(matrixs)))
sum(is.na(colnames(matrixs)))
sum(is.na(colnames(matrixs)))
paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
is.na(colnames(matrixs)) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
#matrixs <- matrix %>% filter(CONDITION == args[2]| CONDITION ==args[1])
matrixs <- matrix
#REFILL_EMPTY_COLUMN_TEST
is.na(colnames(matrixs)) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
is.na(colnames(matrixs))
paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
is.na(colnames(matrixs))
colnames(matrixs[is.na(colnames(matrixs))])
#REFILL_EMPTY_COLUMN_TEST
colnames(matrixs[is.na(colnames(matrixs))]) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
colnames(matrixs[is.na(colnames(matrixs))])
#REFILL_EMPTY_COLUMN_TEST
colnames(matrixs[is.na(colnames(matrixs))]) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
View(matrixs)
colnames(matrixs)
paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
colnames(matrixs[is.na(colnames(matrixs))])
#REFILL_EMPTY_COLUMN_TEST
colnames(matrixs[is.na(colnames(matrixs))]) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
View(matrixs)
is.na(colnames(matrixs)
)
is.na(colnames(matrixs)) == TRUE])
is.na(colnames(matrixs)) == TRUE]
is.na(colnames(matrixs)) == TRUE
which(is.na(colnames(matrixs)))
colnames(matrixs[which(is.na(colnames(matrixs)))])
#REFILL_EMPTY_COLUMN_TEST
colnames(matrixs[which(is.na(colnames(matrixs)))]) <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
# Sample matrix with NA column names
mat <- matrix(1:9, nrow = 3, ncol = 3)
colnames(mat) <- c("A", NA, NA)
# Find columns with NA names
na_cols <- which(is.na(colnames(mat)))
View(mat)
paste0("UNKNOWN", seq_along(na_cols))
new_names
colnames(mat)
colnames(mat)[na_cols] <- new_names
# Sample matrix with NA column names
mat <- matrix(1:9, nrow = 3, ncol = 3)
colnames(mat) <- c("A", NA, NA)
# Find columns with NA names
na_cols <- which(is.na(colnames(mat)))
# Replace NA names with sequential names
new_names <- paste0("UNKNOWN", seq_along(na_cols))
colnames(mat)[na_cols] <- new_names
View(mat)
#REFILL_EMPTY_COLUMN_TEST
na_cols <- which(is.na(colnames(matrixs)))
new_names<-  paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
colnames(matrixs)[na_cols] <- new_names
#matrixs <- matrix %>% filter(CONDITION == args[2]| CONDITION ==args[1])
matrixs <- matrix
#REFILL_EMPTY_COLUMN_TEST
na_cols <- which(is.na(colnames(matrixs)))
new_names <- paste("UNKNOWN",1:sum(is.na(colnames(matrixs))),sep="")
colnames(matrixs)[na_cols] <- new_names
matrixs <- add_column(matrixs, Metadata$CONDITION, .after = 1)
Metadata$CONDITION
matrixs
matrixs <- add_column(matrixs, Metadata$CONDITION, .after = 1)
.name_repair = "minimal
)
.+
.
duplicated(colnames(matrixs))
# Sample data frame with duplicated column names
df <- data.frame(HMDB6643 = c(1, 2, 3), HMDB6643 = c(4, 5, 6), HMDB6643 = c(7, 8, 9))
# Function to rename duplicated columns
rename_duplicates <- function(df) {
duplicated_cols <- duplicated(names(df))
unique_cols <- unique(names(df))
for (col in unique_cols[duplicated_cols]) {
indices <- which(names(df) == col)
for (i in seq_along(indices)[-1]) {
names(df)[indices[i]] <- paste0(col, ".", i)
}
}
return(df)
}
# Rename duplicated columns
df <- rename_duplicates(df)
# Resulting data frame with updated column names
print(df)
rename_duplicates <- function(df) {
duplicated_cols <- duplicated(names(df))
unique_cols <- unique(names(df))
for (col in unique_cols[duplicated_cols]) {
indices <- which(names(df) == col)
for (i in seq_along(indices)[-1]) {
names(df)[indices[i]] <- paste0(col, ".", i)
}
}
return(df)
}
matrixs <- rename_duplicates(matrixs)
View(matrixs)
duplicated(colnames(matrixs))
