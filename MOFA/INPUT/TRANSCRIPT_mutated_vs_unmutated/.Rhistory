#DEFINED IN ADVANCED OPTION, METADATA SECTION
library(dplyr)
setwd(paste(directory,"/Transcriptomics/INPUT",sep=""))
METADATA_FILT <- !is.na(COMMAND_ADVANCED[3,grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))])
METADATA_FILT_INDEX <-grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))
repetition = 0
for (meta_filter in METADATA_FILT_INDEX){
repetition <- repetition + 1
if (!is.na(COMMAND_ADVANCED[3,grep( "*.FILTERING.*", colnames(COMMAND_ADVANCED))])[repetition]){
COLNAME<-as.character(COMMAND_ADVANCED[1,meta_filter])
if (as.character(COMMAND_ADVANCED[2,meta_filter]) =="Numerical"){
To_filter<-as.numeric(unlist(Metadata_Bcell[,COLNAME]))
simbol<-substr(as.character(COMMAND_ADVANCED[3,meta_filter]),1,1)
characters_to_remove <- c(">", "<", "=", " ")
value_threshold <- as.numeric(gsub(paste(characters_to_remove, collapse = "|"), "", as.character(COMMAND_ADVANCED[3,meta_filter])))
comparison_operator <- switch(simbol,
"<" = function(a, b) a < b,
">" = function(a, b) a > b,
"=" = function(a, b) a == b,
">=" = function(a, b) a >= b,
"<=" = function(a, b) a <= b,
NA)
Metadata_Bcell <- Metadata_Bcell[comparison_operator(To_filter, value_threshold),]
DGE2 <- DGE2[,c(comparison_operator(To_filter, value_threshold))]
}else if (as.character(COMMAND_ADVANCED[2,meta_filter]) =="Factors"){
To_filter<- as.character(unlist(Metadata_Bcell[,COLNAME]))
simbol<-substr(as.character(COMMAND_ADVANCED[3,meta_filter]),1,2)
characters_to_remove <- c("!=", "==", " ")
value_threshold <- as.character(gsub(paste(characters_to_remove, collapse = "|"), "", as.character(COMMAND_ADVANCED[3,meta_filter])))
comparison_operator <- switch(simbol,
"==" = function(a, b) a == b,
"!=" = function(a, b) a != b,
NA)
Metadata_Bcell <- Metadata_Bcell[comparison_operator(To_filter, value_threshold),]
DGE2 <- DGE2[,c(comparison_operator(To_filter, value_threshold),TRUE)]
}
}
}
Metadata_Bcell$CONDITION
summary(as.factor(Metadata_Bcell$CONDITION))
if(COMMAND$PREVIEW[i] == "YES"){
#QC preview visualization
#Block to open the Quality control windows to select filtering, normalization and visualize the QC.
#ADD the ID to the first column
Samples_preview<-colnames(DGE2)
numeric_data <- DGE2
numeric_data<-t(numeric_data)
numeric_data<-apply(numeric_data,2,as.numeric)
rownames(numeric_data) <- Samples_preview
metadata <- Metadata_Bcell
numeric_data <- as.data.frame(numeric_data)
colnames(metadata)[colnames(metadata) == "CONDITION"] <- "condition"
# Source the BiomiX_preview script to load the runShinyApp() function
source(paste(directory,'/BiomiX_preview.r', sep=""))
browser_analysis <- readLines(paste(directory,'/_INSTALL/CHOISE_BROWSER_pre-view',sep=""), n = 1)
# Now call the runShinyApp function with numeric_data and metadata
options(browser = get_default_browser())
print("Pre QC data visualization. If the browser does not open automatically copy and paste the link on a browser")
print("One completed the analysis modification click on close app to continue the analysis")
print("ATTENTION!: IF the browser does not open set up the path to your browser on the file ")
Preview <- shiny::runApp(runShinyApp(numeric_data, metadata), launch.browser = TRUE)
DGE2<-as.data.frame(t(Preview$matrix))
Metadata_Bcell<-Preview$metadata
colnames(Metadata_Bcell)[colnames(Metadata_Bcell) == "condition"] <- "CONDITION"
}else{
print("no QC pre-visualization")
}
#STATEMENT IF DATA ARE NORMALIZED OR NOT, IT LOOKS IF NUMERS ARE FLOATS OR INTEGER
if (any(is_float(DGE2))){
NORMALIZATION <- "YES"
print(paste("Automatic detection of normalized data. Are the data normalized? ",NORMALIZATION))
###
DGE3 <- DGE2
DGE3$Gene.name <- rownames(DGE3)
dir.create(path = paste(directory,"/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
directory2 <- paste(directory, "/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
write.table(x=Metadata_Bcell   , file= paste("Metadata_",Cell_type,"_",args[1],".tsv",sep = "")  ,sep= "\t", row.names = FALSE, col.names = T,  quote = FALSE)
colnames(DGE3) <- Metadata_Bcell$ID
DGE3 <- as.data.frame(DGE3)
colnames(DGE3)[ncol(DGE3)] <-"Gene.name"
#DGE2$Gene.name <- rownames(DGE2)
setwd(directory2)
write.table(x=DGE3  , file= paste(Cell_type,"_",args[1],"_vs_", args[2],"_normalized_vst.tsv",sep = "") ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
}else{
NORMALIZATION <- "NO"
print(paste("Automatic detection of normalized data. Are the data normalized? ",NORMALIZATION))
#### DATA NOT NORMALIZED, NORMALIZATION SECTION ----
#VST normalization
DGE2<- apply(DGE2,2,round)
Metadata_Bcell$CONDITION
summary(as.factor(Metadata_Bcell$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = DGE2,
colData = Metadata_Bcell,
design = ~CONDITION)
dds
y<-unlist(args[2])
dds$CONDITION <- relevel(dds$CONDITION, ref = y)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE) #Normalization size factor
normalized_counts2 <- vst(assay(dds)) #Normalization VST
DGE2 <- normalized_counts
DGE2 <- as.data.frame(DGE2)
DGE2$Gene.name <- rownames(DGE2)
DGE3 <- assay(dds)
DGE3 <- as.data.frame(DGE3)
DGE3$Gene.name <- rownames(DGE3)
DGE4 <- normalized_counts2
DGE4 <- as.data.frame(DGE4)
DGE4$Gene.name <- rownames(DGE4)
#### CREATION DATA INTEGRATION MATRICES ----
#create directory
dir.create(path = paste(directory,"/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
directory2 <- paste(directory, "/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
write.table(x=Metadata_Bcell   , file= paste("Metadata_",Cell_type,"_",args[1],".tsv", sep = "")  ,sep= "\t", row.names = FALSE, col.names = T,  quote = FALSE)
colnames(DGE2) <- Metadata_Bcell$ID
DGE2 <- as.data.frame(DGE2)
colnames(DGE2)[ncol(DGE2)] <-"Gene.name"
colnames(DGE3) <- Metadata_Bcell$ID
DGE3 <- as.data.frame(DGE3)
colnames(DGE3)[ncol(DGE3)] <-"Gene.name"
colnames(DGE4) <- Metadata_Bcell$ID
DGE4 <- as.data.frame(DGE4)
colnames(DGE4)[ncol(DGE4)] <-"Gene.name"
#DGE2$Gene.name <- rownames(DGE2)
setwd(directory2)
write.table(x=DGE2  , file= paste(Cell_type,args[1],"vs", args[2],"normalized.tsv",sep = "_") ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
write.table(x=DGE3  , file= paste(Cell_type,args[1],"vs", args[2], "unormalized.tsv",sep = "_")  ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
write.table(x=DGE4  , file= paste(Cell_type,args[1],"vs", args[2], "normalized_vst.tsv",sep = "_")  ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
}
#Genes panel signature
directory2 <- paste(directory,"/Transcriptomics/INPUT",sep="")
setwd(directory2)
if(COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[3] != "X"){
if (grepl("\\.xlsx$|\\.xls$", Gene_panel)) {
genes <- read_excel(Gene_panel)
print("Metadata Excel File read successfully!")
}else{
genes <-vroom(Gene_panel, delim = "\t", col_names = TRUE)}
genes <- genes$GENES_FOR_SUBPOPULATION}
directory2 <- paste(directory, "/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
if (NORMALIZATION=="NO"){
DGE <- counts(dds,normalized=TRUE)
}else{
DGE <- DGE2
}
print("OK")
DGE <- as.data.frame(DGE)
DGE$X <- rownames(DGE)
if(GENE_ANNOTATION == "GENE_NAME"){
DGE$Gene.name <- DGE$X
DGE<-DGE[,-grep("X", colnames(DGE))]
}else{
DGE <- merge(DGE, Mart, by.x = "X", by.y = "Gene.stable.ID")
}
print("OK2")
if (COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[3] != "X") {
Panel=NULL
for (i in genes){
Panel <-append(Panel, which(DGE$Gene.name == i))
}
DGE <- DGE[Panel,]
rownames(DGE)<- DGE$Gene.name
if(GENE_ANNOTATION == "ENSEMBL"){
DGE<- DGE[,c(-1,-ncol(DGE))]
rownames(DGE) <- genes
}else{
DGE<- DGE[,c(-ncol(DGE))]
rownames(DGE) <- genes
}
IFN_score= as.data.frame(matrix(0, ncol = ncol(DGE), nrow = nrow(DGE)))
colnames(IFN_score) <- colnames(DGE)
rownames(IFN_score) <- genes
iteration <- 0
x <- Metadata_Bcell$CONDITION == args[2]
HC <- DGE[,x]
tmp=NULL
for (gene in 1:nrow(DGE)){
if (iteration > 0){
IFN_score[iteration,] <- tmp}
Mean_hd <- as.numeric(apply((HC[gene,]),1,mean))
SD_hd <- as.numeric(apply(HC[gene,],1,sd))
tmp=NULL
iteration <- iteration + 1
for (sample in 1:ncol(DGE)){
value <- ((as.numeric(DGE[gene,sample]) - Mean_hd))/ SD_hd
tmp<-append(tmp,value)
}}
IFN_score[length(Panel),] <- tmp
#HEATMAP
num<-Metadata_Bcell$CONDITION == args[2]
num2<-Metadata_Bcell$CONDITION == args[1]
IFN_score<-IFN_score[, num | num2]
# #### AUTOMATIC IDENTIFICATION POSITIVE - NEGATIVE ----
#USING THE CRITERIA IN ADVANCED OPTION, GENERAL SECTION
library(stringr)
z1 <- IFN_score > 2
colSums(z1, na.rm = TRUE)
positivity1 <- colSums(z1, na.rm = TRUE) >= as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_SUBGROUPING[1])
z2 <- IFN_score > 1
colSums(z2, na.rm = TRUE)
positivity2 <- colSums(z2, na.rm = TRUE) >= as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_SUBGROUPING[2])
positivity<- positivity1|positivity2
Metadata_Bcell$condition <- positivity
Metadata_Bcell$condition <- str_replace(Metadata_Bcell$condition, "TRUE", "pos")
Metadata_Bcell$condition <- str_replace(Metadata_Bcell$condition, "FALSE", "neg")
library(ComplexHeatmap)
setwd(directory2)
pdf(file= paste("Gene_panel_subgroups_", Cell_type,"_", args[1],"_vs_", args[2], ".pdf",sep=""))
#dev.new()
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
col_fun(seq(-3, 3))
p<- Heatmap(IFN_score,km =2, name = "SD_score", col = col_fun, clustering_distance_rows = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[1],  clustering_method_rows= "complete", clustering_method_columns = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[2], row_dend_width = unit(0.5, "cm"),column_dend_height = unit(60, "mm"), column_names_gp = grid::gpar(fontsize = 6),
row_names_gp = grid::gpar(fontsize = 8))
print(p)
#If you want to visualize the group
colnames(IFN_score)<- Metadata_Bcell$CONDITION[ num |num2]
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
col_fun(seq(-3, 3))
t<-c("CTRL" = "blue", "SLE" = "red")
attr(t, "names")[1]<- args[2]
attr(t, "names")[2]<- args[1]
attr(t, "names")
ha = HeatmapAnnotation(condition = Metadata_Bcell$CONDITION,
col = list(condition = t))
p<- Heatmap(IFN_score,km =2, name = "SD_score", col = col_fun, clustering_distance_rows = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[1], clustering_method_rows= "complete", clustering_method_columns = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[2], row_dend_width = unit(0.5, "cm"),column_dend_height = unit(60, "mm"), column_names_gp = grid::gpar(fontsize = 6),
row_names_gp = grid::gpar(fontsize = 8), top_annotation = ha)
print(p)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
col_fun(seq(-3, 3))
ha = HeatmapAnnotation(condition = Metadata_Bcell$condition,
col = list(condition = c("neg" = "blue", "pos" = "red" )))
p<- Heatmap(IFN_score,km =2, name = "SD_score", col = col_fun, clustering_distance_rows = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[1], clustering_method_rows= "complete", clustering_method_columns = COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[2], row_dend_width = unit(0.5, "cm"),column_dend_height = unit(60, "mm"), column_names_gp = grid::gpar(fontsize = 6),
row_names_gp = grid::gpar(fontsize = 8), top_annotation = ha)
print(p)
colnames(IFN_score) <- Metadata$ID
#Saved for annotation
setwd(directory2)
#write.table(Metadata_Bcell, file="Metadata_Bcells", sep = "\t", quote = FALSE, row.names = F)
dev.off()
# #### VALIDATION SIGNATURE ----
#IF WITHIN THE METADATA THERE IS A COLUMN CALLED MARKER, WITH THE SAME BIOLOGICAL MEANING OF
#THE GENE PANEL, YOU CAN COMPARE THE PERFORMANCE IN CLASSIFYING THE SAMPLES.
library(dplyr)
if ("MARKER" %in% colnames(Metadata_Bcell)){
sink("Validation_MARKER_vs_GENE_PANEL.tsv")
#Results classification
print(paste("total number of", args[1], "samples =", nrow(Metadata_Bcell %>% filter(CONDITION == args[1])) , sep = " "))
print(paste("total number of", args[1], "samples with IFN measurement", nrow(Metadata_Bcell %>% filter(CONDITION == args[1]) %>% filter(MARKER > 0 | MARKER < 0 )) , sep = " "))
#Results classification
print(paste("total number of ", args[2], " samples = ", nrow(Metadata_Bcell %>% filter(CONDITION == args[2])) , sep = ""))
print(paste("total number of ", args[2], " samples with IFN measurement = ", nrow(Metadata_Bcell %>% filter(CONDITION == args[2]) %>% filter(MARKER > 0 | MARKER < 0 )) , sep = ""))
#To the metadata table is important to add the column called condition,
#here we must define the classification pos/neg based on the heatmap
setwd(directory2)
#Setting the IFN value to 1 this is the neg/pos condition accuracy
print(paste("Number of samples IFN pos correctly classified = ", nrow(Metadata_Bcell %>% filter(MARKER > 0 | MARKER < 0 ) %>% filter(CONDITION == args[1]) %>% filter(condition == "pos")) , "/",  nrow(Metadata_Bcell %>% filter(CONDITION == args[1]) %>% filter(MARKER > 1.25 )), sep = ""))
#Setting the IFN value to 1 this is the neg/pos condition accuracy
print(paste("Number of samples IFN neg correctly classified = ", nrow(Metadata_Bcell %>% filter(MARKER > 0 | MARKER < 0 ) %>% filter(CONDITION == args[1]) %>% filter(condition == "neg")) , "/",  nrow(Metadata_Bcell %>% filter(CONDITION == args[1]) %>% filter(MARKER < 1.25 )), sep = ""))
#Setting the IFN value to 1 this is the neg/pos condition accuracy
print(paste("Number of samples CTRL pos correctly classified = ", nrow(Metadata_Bcell %>% filter(MARKER > 0 | MARKER < 0 ) %>% filter(CONDITION == args[2]) %>% filter(condition == "pos")) , "/",  nrow(Metadata_Bcell %>% filter(CONDITION == args[2]) %>% filter(MARKER > 1.25 )), sep = ""))
#Setting the IFN value to 1 this is the neg/pos condition accuracy
print(paste("Number of samples CTRL neg correctly classified = ", nrow(Metadata_Bcell %>% filter(MARKER > 0 | MARKER < 0 ) %>% filter(CONDITION == args[2]) %>% filter(condition == "neg")) , "/",  nrow(Metadata_Bcell %>% filter(CONDITION == args[2]) %>% filter(MARKER < 1.25 )), sep = ""))
sink()
}else{
print("No validation marker added")
}
#### SAVING NORMALIZED DATA ----
}else{
print("No panel selected")
}
if (COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[3] != "X"){
if (COMMAND_ADVANCED$ADVANCED_OPTION_SUBGROUPING[3] != "YES") {
Metadata<-Metadata_Bcell
num <- which(Metadata$CONDITION == args[2] & Metadata$condition == "neg")
Metadata$condition[num] <- "healthy"
DGE2 <- as.data.frame(DGE2)
DGE3 <- as.data.frame(DGE3)
Metadata_all <- Metadata
#colnames(DGE2) <- c(Metadata$OMICID, "gene_name")
DGE2<-as.data.frame(t(DGE2))
if (NORMALIZATION=="NO"){
DGE2<-DGE2[-nrow(DGE2),]}else{print("")}
#DGE2<-DGE2[-nrow(DGE2),]
#ADD CENTER AND BATCH TO THE MODEL
#DGE2$batch <- Metadata$Batch
#DGE2$center <- Metadata$Center
#colnames(DGE2) <- c(genes_name,"condition","Batch", "Center")
DGE2$condition <- Metadata$condition
colnames(DGE2) <- c(genes_name,"condition")
rownames(DGE2) <- Metadata$ID
DGE2$samples <- Metadata$ID
}else{
Metadata<-Metadata_Bcell
num <- which(Metadata$CONDITION == args[2] & Metadata$condition == "neg")
Metadata$condition[num] <- "healthy"
num <- which(Metadata$CONDITION == args[2] & Metadata$condition == "pos")
DGE2 <- as.data.frame(DGE2)
DGE3 <- as.data.frame(DGE3)
DGE2 <-DGE2[,-num]
DGE3 <-DGE3[,-num]
Metadata <- Metadata[-num,]
Metadata_all <- Metadata
#colnames(DGE2) <- c(Metadata$OMICID, "gene_name")
DGE2<-as.data.frame(t(DGE2))
if (NORMALIZATION=="NO"){
DGE2<-DGE2[-nrow(DGE2),]}else{print("")}
DGE2$condition <- Metadata$condition
#ADD CENTER AND BATCH TO THE MODEL
#DGE2$batch <- Metadata$Batch
#DGE2$center <- Metadata$Center
#colnames(DGE2) <- c(genes_name,"condition","Batch", "Center")
colnames(DGE2) <- c(genes_name,"condition")
rownames(DGE2) <- Metadata$ID
DGE2$samples <- Metadata$ID
}}else{
Metadata<-Metadata_Bcell
DGE2 <- as.data.frame(DGE2)
DGE3 <- as.data.frame(DGE3)
Metadata_all <- Metadata
#colnames(DGE2) <- c(Metadata$OMICID, "gene_name")
DGE2<-as.data.frame(t(DGE2))
if (NORMALIZATION=="NO"){
DGE2<-DGE2[-nrow(DGE2),]
# colnames(DGE2) <- c(genes_name)
# rownames(DGE2) <- Metadata$ID
}else{print("")
}
####################ATTTTENTION####################
# colnames(DGE2) <- c(genes_name)
# rownames(DGE2) <- Metadata$ID
# DGE2$samples <- Metadata$ID
}
setwd(directory2)
write.table(x=Metadata   , file= paste("Metadata_",Cell_type ,"_", args[1],"_vs_",args[2],"_final.tsv",sep ="")  ,sep= "\t", row.names = FALSE, col.names = T,  quote = FALSE)
write.table(x=DGE3  , file= paste("gene_count_",Cell_type, "_", args[1], "_vs_", args[2],"_unnormalized.tsv", sep ="")  ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
counts<- paste("gene_count_",Cell_type, "_", args[1], "_vs_", args[2],"_unnormalized.tsv", sep ="")
Meta<- paste("Metadata_", Cell_type, "_", args[1],"_vs_",args[2],"_final.tsv",sep ="")
if (NORMALIZATION=="NO"){
print("PATH NO NORMALIZED 1")
directory2 <- paste(directory,"/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
normalizzati <-vroom(file = paste(Cell_type, "_",args[1],"_vs_", args[2],"_normalized_vst.tsv", sep="") , delim = "\t", col_names = TRUE)
normalizzati_size <-vroom(file = paste(Cell_type, "_",args[1],"_vs_", args[2],"_normalized.tsv", sep="") , delim = "\t", col_names = TRUE)
genes <- normalizzati$Gene.name
normalizzati <- normalizzati[,-ncol(normalizzati)]
rownames(normalizzati) <- genes
genes <- normalizzati_size$Gene.name
normalizzati_size <- normalizzati_size[,-ncol(normalizzati_size)]
rownames(normalizzati_size) <- genes
x <- normalizzati_size > 0
righe_da_eliminare=NULL
for (i in 1:nrow(normalizzati_size)){
if ((sum(x[i,]) <= (ncol(normalizzati_size)/2))){
righe_da_eliminare<-append(righe_da_eliminare,i)
}
}
print("numero di geni prima del filtraggio")
print(nrow(normalizzati_size))
if (length(righe_da_eliminare) > 0){
normalizzati_size<-normalizzati_size[-righe_da_eliminare,]
normalizzati<-normalizzati[-righe_da_eliminare,]
gene <- genes[-righe_da_eliminare]
rownames(normalizzati) <-gene
rownames(normalizzati_size) <-gene
}
print("numero di geni dopo il filtraggio")
print(nrow(normalizzati_size))
print(nrow(normalizzati))
}else{
print("PATH NORMALIZED 1")
directory2 <- paste(directory,"/MOFA/INPUT/", Cell_type, "_",args[1],"_vs_", args[2], sep ="")
setwd(directory2)
normalizzati <-vroom(file = paste(Cell_type, "_",args[1],"_vs_", args[2],"_normalized_vst.tsv", sep="") , delim = "\t", col_names = TRUE)
genes <- normalizzati$Gene.name
normalizzati <- normalizzati[,-ncol(normalizzati)]
rownames(normalizzati) <- genes
x <- normalizzati > 0
righe_da_eliminare=NULL
for (i in 1:nrow(normalizzati)){
if ((sum(x[i,]) <= (ncol(normalizzati)/2))){
righe_da_eliminare<-append(righe_da_eliminare,i)
}
}
print("numero di geni prima del filtraggio")
print(nrow(normalizzati))
if (length(righe_da_eliminare) > 0){
normalizzati<-normalizzati[-righe_da_eliminare,]
gene <- genes[-righe_da_eliminare]}else{gene <- genes}
print("numero di geni dopo il filtraggio")
print(nrow(normalizzati))
}
if (NORMALIZATION=="NO"){
print("PATH NO NORMALIZED 2")
varianze = NULL
#Vari <- read.table("tab_finaleDESeq2", header=TRUE, sep = ",")
Vari <- as.matrix(normalizzati_size)
#rownames(Vari) <- Vari[,8]
Vari <- as.data.frame(Vari)
#Vari<- Vari[,c(-1,-ncol(Vari))]
genes <- rownames(Vari)
#Vari<- Vari[,-ncol(Vari)]
#generazione e filtraggio per varianza
for (i in 1:nrow(Vari)){
varianze <- append(varianze, var(as.numeric(Vari[i,])))
}
normalizzati<- as.data.frame(normalizzati)
normalizzati$Gene.name <- gene
normalizzati$variance <- log10(varianze)
normalizzati_size<- as.data.frame(normalizzati_size)
normalizzati_size$Gene.name <- gene
normalizzati_size$variance <- log10(varianze)
if(GENE_ANNOTATION == "GENE_NAME"){
MART<-read.table(paste(directory,"/MOFA/x_BiomiX_DATABASE/mart_export_37.txt", sep=""), sep = ",", header=TRUE)
colnames(MART)[2] <-"Gene"
normalizzati <- merge(normalizzati, MART, by.x = "Gene.name", by.y = "Gene")
normalizzati <- normalizzati[,-1]
colnames(normalizzati)[ncol(normalizzati)] <- "Gene.name"
normalizzati <- normalizzati[, c(1:(ncol(normalizzati) - 2), ncol(normalizzati), ncol(normalizzati) -1 )]
}
#OVERWRITE OR REPLACE A FINAL NORMALIZED FILE WITH VARIANCE IN IT.
normalizzati_MOFA <- normalizzati[order(normalizzati$variance, decreasing = TRUE), ]
limit<-as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_MOFA[1])
if(length(rownames(normalizzati_MOFA)) > limit){
normalizzati_MOFA <- normalizzati_MOFA[1:limit,]}
write.table(x=normalizzati_MOFA  , file= paste(Cell_type,args[1], "vs", args[2], "normalized_vst_variance.tsv",sep = "_")  ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
}else{
print("PATH YES NORMALIZED 2")
varianze = NULL
#Vari <- read.table("tab_finaleDESeq2", header=TRUE, sep = ",")
Vari <- as.matrix(normalizzati)
#rownames(Vari) <- Vari[,8]
Vari <- as.data.frame(Vari)
#Vari<- Vari[,c(-1,-ncol(Vari))]
genes <- rownames(Vari)
#generazione e filtraggio per varianza
for (i in 1:nrow(Vari)){
varianze <- append(varianze, var(as.numeric(Vari[i,])))
}
normalizzati<- as.data.frame(normalizzati)
normalizzati$Gene.name <- gene
normalizzati$variance <- log10(varianze)
if(GENE_ANNOTATION == "GENE_NAME"){
MART<-read.table(paste(directory,"/MOFA/x_BiomiX_DATABASE/mart_export_37.txt", sep=""), sep = ",", header=TRUE)
colnames(MART)[2] <-"Gene"
normalizzati <- merge(normalizzati, MART, by.x = "Gene.name", by.y = "Gene")
normalizzati <- normalizzati[,-1]
colnames(normalizzati)[ncol(normalizzati)] <- "Gene.name"
normalizzati <- normalizzati[, c(1:(ncol(normalizzati) - 2), ncol(normalizzati), ncol(normalizzati) -1 )]
}
normalizzati_MOFA <- normalizzati[order(normalizzati$variance, decreasing = TRUE), ]
limit<-as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_MOFA[1])
if(length(rownames(normalizzati_MOFA)) > limit){
normalizzati_MOFA <- normalizzati_MOFA[1:limit,]}
write.table(x=normalizzati_MOFA  , file= paste(Cell_type, args[1], "vs", args[2], "normalized_vst_variance.tsv",sep = "_")  ,sep= "\t", row.names = F, col.names = T,  quote = FALSE)
normalizzati_size <- normalizzati
}
genes
varianze
i
var(as.numeric(Vari[i,]))
Vari[i,]
as.numeric(Vari[i,]
)
var(as.numeric(Vari[i,])
)
as.numeric(Vari[i,]))
as.numeric(Vari[i,])
var(as.numeric(Vari[i,]))
var((Vari[i,]))
var(a.numeric(Vari[i,]))
var(as.numeric(Vari[i,]))
as.numeric(Vari[i,]))
as.vector(as.numeric(Vari[i,]))
var(as.vector(as.numeric(Vari[i,])))
unlist(Vari[i,])
var(as.numeric(unlist(Vari[i,]))
)
unlist(Vari[i,]))
var((unlist(Vari[i,])
)
)
Vari[i,])
Vari[i,]
as.data.frame(Vari[i,])
as.matrix(Vari[i,])
as.matrix(Vari[i,])
?var
#Vari <- read.table("tab_finaleDESeq2", header=TRUE, sep = ",")
Vari <- as.matrix(normalizzati_size)
rownames(Vari)
#Vari<- Vari[,c(-1,-ncol(Vari))]
genes <- rownames(Vari)
var(as.numeric((Vari[i,])))
#rownames(Vari) <- Vari[,8]
Vari <- as.data.frame(Vari)
ar(as.numeric((Vari[i,])))
var(as.numeric((Vari[i,])))
is.atomic(as.numeric((Vari[i,])))
is.atomic(as.numeric((Vari[i,])))
y<- as.numeric((Vari[i,]))
var(y)
is.atomic(y)
is.atomic(y)
var(y)
is.atomic(y)
